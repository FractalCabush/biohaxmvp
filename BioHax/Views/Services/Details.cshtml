@model BioHax.Models.NDEFUri
@using BioHax.Authorization;
@using System.Text;

@{
    ViewData["Title"] = "Details";
}

<h2>Details</h2>

<div>
    <h4>Service</h4>
    <hr />
    <dl class="dl-horizontal">
        <dt>
            @Html.DisplayNameFor(model => model.Provider)
        </dt>
        <dd>
            @Html.DisplayFor(model => model.Provider)
        </dd>
		<dt>
			@Html.DisplayNameFor(model => model.Record.URI)
		</dt>
		<dd>
			@Html.DisplayFor(model => model.Record.FormattedURI)
		</dd>
    </dl>
</div>
@if (Model.Status != ServiceStatus.Approved)
{
	@if (await AuthorizationService.AuthorizeAsync(User, Model, ServiceOperations.Approve))
	{
		<form asp-action="SetStatus" asp-controller="Services" style="display:inline;">
			<input type="hidden" name="id" value="@Model.ServiceId" />
			<input type="hidden" name="status" value="@ServiceStatus.Approved" />
			<button type="submit" class="btn btn-xs btn-success">Approve</button>
		</form>
	}
}
@if (Model.Status != ServiceStatus.Rejected)
{
	@if (await AuthorizationService.AuthorizeAsync(User, Model, ServiceOperations.Reject))
	{
		<form asp-action="SetStatus" asp-controller="Services" style="display:inline;">
			<input type="hidden" name="id" value="@Model.ServiceId" />
			<input type="hidden" name="status" value="@ServiceStatus.Rejected" />
			<button type="submit" class="btn btn-xs btn-danger">Reject</button>
		</form>
	}
}
<div>
	@* Uncomment to perform authorization check. A real app would hide the edit link from users
			uses who don't have edit access. A user without edit access can click the link but will get denied
			access in the controller.
	*@
		@if(await AuthorizationService.AuthorizeAsync(User, Model, ServiceOperations.Update))
		{
			<a asp-action="Edit" asp-route-id="@Model.ServiceId">Edit</a> <text>|</text>
		}
	
	<a asp-action="Index">Back to List</a>
</div>
